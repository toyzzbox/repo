generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(cuid())
  name             String
  email            String         @unique
  emailVerified    Boolean
  image            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  password         String
  role             Role           @default(USER)
  failedLoginCount Int            @default(0)
  lockedUntil      DateTime?
  lastLoginAt      DateTime?
  lastLoginIp      String?
  addresses        Address[]
  carts            Cart[]
  favorites        Favorite[]
  accounts         Account[]
  comments         Comment[]
  loginAttempts    LoginAttempt[]
  sessions         Session[]
  orders           Order[]        // Bu satƒ±rƒ± ekleyin
  invoices    Invoice[]



  @@map("users")
}

model Account {
  userId                String
  scope                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  id                    String    @id @default(cuid())
  accessToken           String?
  accessTokenExpiresAt  DateTime?
  accountId             String?
  idToken               String?
  password              String?
  providerId            String?
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Session {
  userId       String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  id           String   @id @default(cuid())
  ipAddress    String?
  userAgent    String?
  sessionToken String?  @unique
  isActive     Boolean  @default(true)
  lastAccessAt DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@map("sessions")
}

model LoginAttempt {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String?
  email     String
  ipAddress String
  userAgent String?
  success   Boolean
  reason    String?
  user      User?    @relation(fields: [userId], references: [id])

  @@index([email, createdAt])
  @@index([ipAddress, createdAt])
  @@index([userId])
  @@map("login_attempts")
}

model Verification {
  id         String    @id @default(cuid())
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  identifier String
  value      String
  expiresAt  DateTime
  type       VerificationType?
  used       Boolean?  @default(false)

  @@unique([identifier, type])
  @@map("verifications")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Attribute {
  id       String         @id @default(cuid())
  name     String
  groupId  String
  group    AttributeGroup @relation("GroupAttributes", fields: [groupId], references: [id])
  medias   Media[]        @relation("AttributeToMedia")
  products Product[]      @relation("ProductAttribute")

  @@map("Attribute")
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  medias      Media[]   @relation("BrandToMedia")
  products    Product[] @relation("ProductToBrand")

  @@map("Brand")
}

model Category {
  id          String     @id @default(cuid())
  slug        String     @unique
  name        String
  description String
  parentId    String?
  order       Int         @default(0)          // üëà Sƒ±ralama alanƒ± eklendi
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryHierarchy")
  medias      Media[]    @relation("CategoryToMedia")
  products    Product[]  @relation("ProductToCategory")

  @@map("Category")
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  fullName    String
  phone       String
  addressLine String
  city        String
  district    String
  postalCode  String
  isDefault   Boolean  @default(false)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orders      Order[]  // Opsiyonel: referans i√ßin

  @@map("Address")
}

model AttributeGroup {
  id         String      @id @default(cuid())
  name       String
  attributes Attribute[] @relation("GroupAttributes")

  @@map("AttributeGroup")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  sessionId String?    // Bu satƒ±rƒ± ekleyin
  expiresAt DateTime?  // Bu satƒ±rƒ± ekleyin
  status    CartStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@index([userId])
  @@index([sessionId])           // Bu satƒ±rƒ± ekleyin
  @@index([status, expiresAt])   // Bu satƒ±rƒ± ekleyin
  @@map("Cart")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Float    // Bu satƒ±rƒ± ekleyin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("CartItem")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("Favorite")
}

model Media {
  id           String         @id @default(cuid())
  type         MediaType
  files        MediaFile[]   // ‚úÖ urls yerine ili≈ükisel yapƒ±
  altText String?
  title String?
  description String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  productMedia ProductMedia[]
  attributes   Attribute[]    @relation("AttributeToMedia")
  brands       Brand[]        @relation("BrandToMedia")
  categories   Category[]     @relation("CategoryToMedia")

  @@map("Media")
}


model MediaFile {
  id        String   @id @default(cuid())
  url       String
  format    String?   // √∂rn: webp, jpg, mp4
  width     Int?
  height    Int?
  size      Int?
  quality   String?   // √∂rn: ‚Äúhigh‚Äù, ‚Äúmedium‚Äù, ‚Äúthumbnail‚Äù
  mediaId   String
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
}

model Product {
  id           String         @id @default(cuid())
  slug         String         @unique
  name         String
  price        Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  discount     Float?
  groupId      String?
  isActive     Boolean        @default(true)
  serial       String?        @unique
  sku          String?
  stock        Int?
  description  String?        @db.Text
  views        Int            @default(0)
  barcode      String?        @unique
  cartItems    CartItem[]
  favorites    Favorite[]
  group        ProductGroup?  @relation(fields: [groupId], references: [id])
  medias       ProductMedia[]
  comments     Comment[]
  attributes   Attribute[]    @relation("ProductAttribute")
  brands       Brand[]        @relation("ProductToBrand")
  categories   Category[]     @relation("ProductToCategory")
  orderItems   OrderItem[]

  @@index([slug])
  @@index([isActive])
  @@map("Product")
}

model ProductGroup {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  products    Product[]

  @@map("ProductGroup")
}

model ProductMedia {
  productId String
  mediaId   String
  order     Int
  media     Media   @relation(fields: [mediaId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([productId, mediaId])
  @@map("ProductMedia")
}



model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])

  subtotal        Float
  shippingCost    Float
  total           Float

  status          OrderStatus @default(PENDING)

  // Adres bilgisi snapshot ve isteƒüe baƒülƒ± referans
  addressId       String?     
  address         Address?    @relation(fields: [addressId], references: [id])

  shippingName       String      // snapshot: fullName
  shippingPhone      String      // snapshot: phone
  shippingAddress    String      // snapshot: addressLine
  shippingCity       String      // snapshot: city
  shippingDistrict   String      // snapshot: district
  shippingPostalCode String      // snapshot: postalCode

  deliveryMethod  String
  deliveryDate    DateTime?

  paymentMethod   String

  orderItems      OrderItem[]

  invoiceId       String?      @unique
  invoice         Invoice?     @relation("OrderInvoice", fields: [invoiceId], references: [id])


  createdAt       DateTime    @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
  @@index([status])
  @@map("Order")
}




enum OrderStatus {
  PENDING      // sipari≈ü olu≈üturuldu, √∂deme bekleniyor
  PAID         // √∂deme alƒ±ndƒ±
  SHIPPED      // kargoya verildi
  COMPLETED    // teslim edildi
  CANCELED     // iptal edildi
  RETURNED     // iade edildi (√ºr√ºn geri geldi, iade s√ºreci tamamlandƒ±)
  REFUNDED     // √ºcret iade edildi (√∂deme iadesi tamamlandƒ±)
}

model OrderItem {
  id           String   @id @default(cuid())
  orderId      String
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId    String
  product      Product  @relation(fields: [productId], references: [id])
  quantity     Int
  price        Float
  productName  String
  productImage String?
  
  createdAt    DateTime @default(now())

  @@map("OrderItem")
}



enum InvoiceType {
  INDIVIDUAL
  CORPORATE
}
model Invoice {
  id             String       @id @default(cuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id])

  // üßæ Order ili≈ükisi (tek taraflƒ±, sadece eri≈üim)
  order          Order?       @relation("OrderInvoice")

  type           InvoiceType  @default(INDIVIDUAL)

  // üë§ Bireysel fatura alanlarƒ±
  fullName       String?
  tcNumber       String?

  // üè¢ Kurumsal fatura alanlarƒ±
  companyName    String?
  taxOffice      String?
  taxNumber      String?

  // üìç Ortak adres alanlarƒ±
  addressLine    String
  city           String
  district       String
  postalCode     String?
  email          String?
  phone          String?

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
enum Role {
  USER
  ADMIN
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR
}

enum MediaType {
  image
  video
}

enum CartStatus {
  ACTIVE
  ABANDONED
  SAVED
  CHECKEDOUT
  COMPLETED
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role      Role     @default(USER) // ðŸ†• sadece senin iÃ§in ADMIN olacak  accounts      Account[]
  sessions      Session[]
  addresses Address[]
  favorites Favorite[] // ðŸ‘ˆ bir kullanÄ±cÄ±nÄ±n favorileri
  comments Comment[]  
    accounts  Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}


model Comment {
  id        String   @id @default(cuid())
  content   String
  rating    Int      // 1â€“5 arasÄ± puan
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@map("comments")
}

model Address {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  fullName    String
  city        String
  district    String
  postalCode  String   // âœ… Yeni eklenen alan
  addressLine String
  phone       String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
}


model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Media {
  id        String    @id @default(cuid())
  type      MediaType
  urls      String[]
  brands      Brand[]    @relation("BrandToMedia")
  categories  Category[]    @relation("CategoryToMedia")
  attributes  Attribute[]   @relation("AttributeToMedia")
  createdAt DateTime  @default(now())
  updatedAt   DateTime @updatedAt @default(now())  // ðŸ”§ bu satÄ±r Ã¶nemli
  products  ProductMedia[] // âœ… Ekledik
}


enum MediaType {
  image
  video
}

model Product {
  id          String     @id @default(cuid())
  slug        String     @unique
  name        String
  serial      String?    @unique // âœ… Opsiyonel
  stock       Int?                 // âœ… Opsiyonel
  barcode     String?    @unique // âœ… Barkod alanÄ± (EAN-13 gibi)
  price       Float
  description String? @db.Text
  favorites Favorite[] // ðŸ‘ˆ bu Ã¼rÃ¼nÃ¼ favorileyen kullanÄ±cÄ±lar
  comments  Comment[] // âœ… EKLENDÄ°
  views Int    @default(0)

  groupId     String? // âœ… Opsiyonel
  group       ProductGroup? @relation(fields: [groupId], references: [id])

  brands      Brand[]    @relation("ProductToBrand")
  categories  Category[] @relation("ProductToCategory")
medias      ProductMedia[] // âœ… DEÄžÄ°ÅžTÄ°
  attributes  Attribute[] @relation("ProductAttribute")

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt @default(now())

  sku         String?       // alternatif stok kodu
  discount    Float?        // indirimli fiyat
  isActive    Boolean       @default(true)
}

model ProductMedia {
  product   Product @relation(fields: [productId], references: [id])
  productId String

  media     Media   @relation(fields: [mediaId], references: [id])
  mediaId   String

  order     Int

  @@id([productId, mediaId])
}

model ProductGroup {
  id       String    @id @default(cuid())
  name     String
  slug     String    @unique
  description String? @db.Text
  products Product[]

} 

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // AynÄ± Ã¼rÃ¼n bir kullanÄ±cÄ± tarafÄ±ndan bir kez eklenebilir
}


model AttributeGroup {
  id        String      @id @default(cuid())
  name      String      // Attribute grubunun adÄ± (Ã¶rn. "Renk", "Beden")
  attributes Attribute[] @relation("GroupAttributes") // Bu gruba ait attribute'lar
}

model Attribute {
  id              String         @id @default(cuid())
  name            String         // Attribute adÄ± (Ã¶rn. "KÄ±rmÄ±zÄ±", "Mavi")
  groupId         String         // Ä°liÅŸkili olduÄŸu attribute grubunun ID'si
  group           AttributeGroup  @relation("GroupAttributes", fields: [groupId], references: [id]) // Ä°liÅŸki tanÄ±mÄ±
  products    Product[] @relation("ProductAttribute")
  medias      Media[]    @relation("AttributeToMedia")

}


model Brand {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String? @db.Text
  products    Product[] @relation("ProductToBrand")
  medias      Media[]    @relation("BrandToMedia")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt @default(now())  // ðŸ”§ bu satÄ±r Ã¶nemli
}

model Category {
  id          String     @id @default(cuid())
  slug        String     @unique
  name        String
  description String
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]  @relation("ProductToCategory")
  medias      Media[]    @relation("CategoryToMedia")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime @updatedAt @default(now())  
  // ðŸ”§ bu satÄ±r Ã¶nemli
}


enum Role {
  ADMIN
  USER
}



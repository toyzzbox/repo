generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  name             String
  password         String
  email            String    @unique
  emailVerified    Boolean   @default(false)
  image            String?
  
  // Auth & Security fields
  role             Role      @default(USER)
  failedLoginCount Int       @default(0)
  lockedUntil      DateTime?
  lastLoginAt      DateTime?
  lastLoginIp      String?
  
  // Relations
  sessions         Session[]
  accounts         Account[]
  addresses        Address[]
  favorites        Favorite[]
  comments         Comment[]
  carts            Cart[]
  orders           Order[]
  loginAttempts    LoginAttempt[]
  
  @@map("users")
}

model Account {
  id                        String    @id @default(cuid())
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt
  accountId                 String?
  providerId                String?
  accessToken               String?
  refreshToken              String?
  idToken                   String?
  accessTokenExpiresAt      DateTime?
  refreshTokenExpiresAt     DateTime?
  scope                     String?
  password                  String?
  userId                    String
  user                      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  expiresAt     DateTime
  sessionToken  String   @unique
  ipAddress     String?
  userAgent     String?
  isActive      Boolean  @default(true)
  lastAccessAt  DateTime @default(now())
  
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionToken])
  @@index([isActive])
  @@map("sessions")
}

model LoginAttempt {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String?
  email     String
  ipAddress String
  userAgent String?
  success   Boolean
  reason    String?
  
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([email, createdAt])
  @@index([ipAddress, createdAt])
  @@index([userId])
  @@map("login_attempts")
}

model Verification {
  id          String            @id @default(cuid())
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  identifier  String
  value       String
  type        VerificationType
  expiresAt   DateTime
  used        Boolean           @default(false)
  
  @@unique([identifier, type])
  @@map("verifications")
}

enum Role {
  USER
  ADMIN
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR
}

/* ===========================
   E-TÄ°CARET MODELLER
   =========================== */

model Comment {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
 
  @@map("comments")
}

model Address {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  fullName    String
  city        String
  district    String
  postalCode  String
  addressLine String
  phone       String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  @@map("addresses")
}

model Media {
  id         String       @id @default(cuid())
  type       MediaType
  urls       String[]
  brands     Brand[]      @relation("BrandToMedia")
  categories Category[]   @relation("CategoryToMedia")
  attributes Attribute[]  @relation("AttributeToMedia")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  products   ProductMedia[]
  
  @@map("media")
}

enum MediaType {
  image
  video
}

model Product {
  id          String       @id @default(cuid())
  slug        String       @unique
  name        String
  serial      String?      @unique
  stock       Int?
  barcode     String?      @unique
  price       Float
  description String?      @db.Text
  favorites   Favorite[]
  comments    Comment[]
  views       Int          @default(0)

  groupId     String?
  group       ProductGroup? @relation(fields: [groupId], references: [id])

  brands      Brand[]       @relation("ProductToBrand")
  categories  Category[]    @relation("ProductToCategory")
  medias      ProductMedia[]
  attributes  Attribute[]   @relation("ProductAttribute")
  cartItems   CartItem[]
  orderItems  OrderItem[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  sku         String?
  discount    Float?
  isActive    Boolean    @default(true)
  
  @@index([slug])
  @@index([isActive])
  @@map("products")
}

model ProductMedia {
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  media     Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  mediaId   String

  order     Int

  @@id([productId, mediaId])
  @@map("product_media")
}

model ProductGroup {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  products    Product[]
  
  @@map("product_groups")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@map("favorites")
}

model AttributeGroup {
  id         String      @id @default(cuid())
  name       String
  attributes Attribute[] @relation("GroupAttributes")
  
  @@map("attribute_groups")
}

model Attribute {
  id        String        @id @default(cuid())
  name      String
  groupId   String
  group     AttributeGroup @relation("GroupAttributes", fields: [groupId], references: [id])
  products  Product[]     @relation("ProductAttribute")
  medias    Media[]       @relation("AttributeToMedia")
  
  @@map("Attribute")
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  products    Product[] @relation("ProductToBrand")
  medias      Media[]   @relation("BrandToMedia")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("Brand")
}

model Category {
  id          String     @id @default(cuid())
  slug        String     @unique
  name        String
  description String
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]  @relation("ProductToCategory")
  medias      Media[]    @relation("CategoryToMedia")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@map("Category")
}

/* ===========================
   SEPET SÄ°STEMÄ° (HYBRID)
   =========================== */

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // ðŸ”¥ HYBRID SISTEM
  sessionId String?    // Misafir kullanÄ±cÄ±lar iÃ§in session ID
  expiresAt DateTime?  // Sepet sona erme tarihi
  
  items     CartItem[]
  status    CartStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // ðŸ”¥ Performans Ä°ndexleri
  @@index([userId])
  @@index([sessionId])
  @@index([status, expiresAt])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String
  product   Product  @relation(fields: [productId], references: [id])

  quantity  Int      @default(1)
  price     Float    // ðŸ”¥ Sepete eklendiÄŸi andaki fiyat snapshot

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸ”¥ AynÄ± Ã¼rÃ¼n aynÄ± sepette sadece 1 kez
  @@unique([cartId, productId])
  @@index([productId])
  @@map("cart_items")
}

enum CartStatus {
  ACTIVE     // Aktif sepet
  ABANDONED  // Terk edilmiÅŸ
  SAVED      // Daha sonra al
  MERGED     // BaÅŸka sepete birleÅŸtirildi
  CONVERTED  // SipariÅŸe dÃ¶nÃ¼ÅŸtÃ¼
  EXPIRED    // SÃ¼resi doldu
}

/* ===========================
   SÄ°PARÄ°Åž SÄ°STEMÄ°
   =========================== */

model Order {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  
  orderNumber   String      @unique
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  shippingCost  Float       @default(0)
  
  // Teslimat bilgileri
  shippingAddress Json?
  
  items         OrderItem[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  
  quantity  Int
  price     Float    // SipariÅŸ anÄ±ndaki fiyat
  
  createdAt DateTime @default(now())
  
  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
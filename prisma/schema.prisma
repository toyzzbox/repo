// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)

  // Relations
  accounts      Account[]
  sessions      Session[]
  addresses     Address[]
  favorites     Favorite[]
  comments      Comment[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())  // PK eklendi
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  provider          String
  providerAccountId String

  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // BetterAuth alan adı:
  expiresAt   DateTime

  // Opsiyonel (log için faydalı)
  ipAddress   String?
  userAgent   String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sessions")
}

/* ===========================
   E-TİCARET / DİĞER MODELLER
   =========================== */

model Comment {
  id        String   @id @default(cuid())
  content   String
  rating    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@map("comments")
}

model Address {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  fullName    String
  city        String
  district    String
  postalCode  String
  addressLine String
  phone       String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Media {
  id         String       @id @default(cuid())
  type       MediaType
  urls       String[]
  brands     Brand[]      @relation("BrandToMedia")
  categories Category[]   @relation("CategoryToMedia")
  attributes Attribute[]  @relation("AttributeToMedia")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  products   ProductMedia[]
}

enum MediaType {
  image
  video
}

model Product {
  id          String       @id @default(cuid())
  slug        String       @unique
  name        String
  serial      String?      @unique
  stock       Int?
  barcode     String?      @unique
  price       Float
  description String?      @db.Text
  favorites   Favorite[]
  comments    Comment[]
  views       Int          @default(0)

  groupId     String?
  group       ProductGroup? @relation(fields: [groupId], references: [id])

  brands      Brand[]       @relation("ProductToBrand")
  categories  Category[]    @relation("ProductToCategory")
  medias      ProductMedia[]
  attributes  Attribute[]   @relation("ProductAttribute")

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  sku         String?
  discount    Float?
  isActive    Boolean    @default(true)
}

model ProductMedia {
  product   Product @relation(fields: [productId], references: [id])
  productId String

  media     Media   @relation(fields: [mediaId], references: [id])
  mediaId   String

  order     Int

  @@id([productId, mediaId])
}

model ProductGroup {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  products    Product[]
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model AttributeGroup {
  id         String      @id @default(cuid())
  name       String
  attributes Attribute[] @relation("GroupAttributes")
}

model Attribute {
  id        String        @id @default(cuid())
  name      String
  groupId   String
  group     AttributeGroup @relation("GroupAttributes", fields: [groupId], references: [id])
  products  Product[]     @relation("ProductAttribute")
  medias    Media[]       @relation("AttributeToMedia")
}

model Brand {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?   @db.Text
  products    Product[] @relation("ProductToBrand")
  medias      Media[]   @relation("BrandToMedia")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Category {
  id          String     @id @default(cuid())
  slug        String     @unique
  name        String
  description String
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]  @relation("ProductToCategory")
  medias      Media[]    @relation("CategoryToMedia")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}




